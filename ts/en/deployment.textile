---
layout: ts_en
title: Deployment
---

h2. Deployment

h3. Deployment concerns

Deploying Thinking Sphinx can be a little bit of a pain because the Sphinx search engine has to run as a separate process. Managing this can be a bit tricky, particularly if you use Capistrano. By default, ThinkingSphinx stores the search index files in db/sphinx/ and its log files and pid file in log/ ... This poses a problem, as Capistrano rotates the "current" directory every time you do a deploy, thereby throwing the ThinkingSphinx files out of reach of the current deploy.

Thankfully, getting around this isn't too difficult. You can use the "advanced configuration sphinx.yml":advanced_config.html file to store the appropriate files in the "shared" directory.

A sample of this would be:

{% highlight yaml %}
production:
  config_file: "/path/to/current/deploy/shared/config/production.sphinx.conf"
  searchd_log_file: "/path/to/current/deploy/shared/log/searchd.log"
  query_log_file: "/path/to/current/deploy/shared/log/searchd.query.log"
  pid_file: "/path/to/current/deploy/shared/log/searchd.production.pid"
  searchd_file_path: "/path/to/current/deploy/shared/sphinx/production"
{% endhighlight %}

*NB* You'll need to ensure that the "shared/config" directory is created. You can do this with a capistrano task:

{% highlight ruby %}
namespace :deploy do
  namespace :ts do
    desc "Set up the Thinking Sphinx shared config directory"
    task :setup, :roles => :app do
      run "mkdir -p #{deploy_to}/shared/config"
      run "mkdir -p #{deploy_to}/shared/sphinx"
    end
  end
end
{% endhighlight %}

You can then setup the shared directories by running:

{% highlight sh %}
cap deploy:ts:setup
{% endhighlight %}

You might also want to put the Thinking Sphinx rake tasks into your deploy recipe:

{% highlight ruby %}
namespace :deploy do
  namespace :ts do
  
    desc "Run the Sphinx indexer"
    task :index, :roles => :app do
      run "cd #{current_path} && RAILS_ENV=production rake ts:index"
    end

    desc "Start the Sphinx Server"
    task :start, :roles => :app do
      run "cd #{current_path} && RAILS_ENV=production rake ts:start"
    end
    
    desc "Stop the Sphinx Server"
    task :stop, :roles => :app do
      run "cd #{current_path} && RAILS_ENV=production rake ts:stop"
    end

    desc "Restart the Sphinx Server"
    task :restart, :roles => :app do
      run "cd #{current_path} && RAILS_ENV=production rake ts:restart"
    end
    
    desc "Stop the Sphinx server, run the indexer, then start the server again"
    task :refresh, :roles => :app do
      run "cd #{current_path} && RAILS_ENV=production rake ts:stop && RAILS_ENV=production rake ts:index && RAILS_ENV=production rake ts:start"
    end
  end
end
{% endhighlight %}

You can now run the follow capistrano tasks:

{% highlight sh %}
cap deploy:ts:index
cap deploy:ts:start
cap deploy:ts:stop
cap deploy:ts:restart
{% endhighlight %}

The refresh task is useful if you've changed any of your index definitions in your models. It stops the Sphinx server, runs an index, then starts the server again.

{% highlight sh %}
cap deploy:ts:refresh
{% endhighlight %}