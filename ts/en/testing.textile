---
layout: ts_en
title: Testing
---

h2. Testing with Thinking Sphinx

h3. Controller Tests and Specs

It's recommended you stub out any search calls, as Thinking Sphinx should ideally only be used in integration testing (whether that be via Cucumber or other methods).

h3. Cucumber

As of version *1.3.1*, Thinking Sphinx has a helper object to make combining Thinking Sphinx and Cucumber quite easy. You'll need to add the following two lines to your @features/support/env.rb@ file:

{% highlight ruby %}
require 'cucumber/thinking_sphinx/external_world'
Cucumber::ThinkingSphinx::ExternalWorld.new
{% endhighlight %}

And you also _need_ to turn transactional fixtures off:

{% highlight ruby %}
Cucumber::Rails::World.use_transactional_fixtures = false
{% endhighlight %}

The reason for this is that while ActiveRecord can run all its operations within a single transaction, Sphinx doesn't have access to that, and so indexing will not include your transaction's changes.

The added complication to this is that you'll probably want to clear all the data from your database between scenarios. This can be done within the @Before@ block, in one of your steps files (see below). Another option is Ben Mabey's "Database Cleaner":http://github.com/bmabey/database_cleaner library.

{% highlight ruby %}
Before do
  # Add your own models here instead.
  [Article, User].each do |model|
    model.delete_all
  end
end
{% endhighlight %}

Once this is all set up, then Sphinx will automatically index and start the daemon when you run your features - but only once at the very beginning, not for every scenario (as that could be quite slow).

To re-index during specific scenarios, I recommend adding steps something like the following (to be called after preparing your model data, but before Webrat browses the application):

{% highlight ruby %}
Given 'the Sphinx indexes are updated' do
  # Update all indexes
  ThinkingSphinx::Configuration.instance.controller.index
  sleep(0.25) # Wait for Sphinx to catch up
end

Given 'the Sphinx indexes for articles are updated' do
  # Update specific indexes
  ThinkingSphinx::Configuration.instance.
    controller.index 'article_core', 'article_delta'
  sleep(0.25) # Wait for Sphinx to catch up
end
{% endhighlight %}

Delta indexes (if you're using the default approach) will automatically update just like they do in a normal application environment.

Any suggestions to improve this workflow are very much welcome.
