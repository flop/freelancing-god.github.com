---
layout: ts_en
title: Searching
---

h2. Searching

Once you've "got an index set up":indexing.html on your model, and have "the Sphinx daemon running":rake_tasks.html, then you can start to search, using a model named just that.

{% highlight ruby %}
Article.search 'pancakes'
{% endhighlight %}

To focus a query on a specific field, you can use the *:conditions* option - much like in ActiveRecord:

{% highlight ruby %}
Article.search :conditions => {:subject => 'pancakes'}
{% endhighlight %}

You can combine both field-specific queries and generic queries too:

{% highlight ruby %}
Article.search 'pancakes', :conditions => {:subject => 'tasty'}
{% endhighlight %}

Please keep in mind that Sphinx does not support SQL comparison operators - it has its own query language. The *:conditions* option must be a hash, with each key a field and each value a string.

Filters on attributes can be defined using a similar syntax, but using the *:with* option.

{% highlight ruby %}
Article.search 'pancakes', :with => {:author_id => @pat.id}
{% endhighlight %}

Filters have the advantage over focusing on specific fields in that they accept arrays and ranges:

{% highlight ruby %}
Article.search 'pancakes', :with => {
  :created_at => 1.week.ago..Time.now,
  :author_id  => @fab_four.collect { |author| author.id }
}
{% endhighlight %}

And of course, you can mix and match global terms, field-specific terms, and filters:

{% highlight ruby %}
Article.search 'pancakes',
  :conditions => {:subject => 'tasty'},
  :with       => {:created_at => 1.week.ago..Time.now}
{% endhighlight %}

h3. Pagination

Sphinx paginates search results by default. Indeed, there's no way to turn it off (but you can request really big pages should you wish). The parameters for pagination in Thinking Sphinx are exactly the same as "Will Paginate":http://github.com/mislav/will_paginate/tree/master: *:page* and *:per_page*.

{% highlight ruby %}
Article.search 'pancakes', :page => params[:page], :per_page => 42
{% endhighlight %}

The output of search results can be used with Will Paginate's view helper as well, just to keep things nice and easy.

{% highlight ruby %}
# in the controller:
@articles = Article.search 'pancakes'

# in the view:
will_paginate @articles
{% endhighlight %}

h3. Grouping / Clustering

Sphinx allows you group search records that share a common attribute. You can read more about it on the "official Sphinx documentation":http://sphinxsearch.com/docs/current.html#clustering Grouping comes in handy when you want to show aggregated collections. For example, if you have a set of posts and they are all part of a category and have a category_id, you could group your results by category id and show a set of all the categories matched by your search, as well as all the posts.

For grouping to work, you need to pass in the :group_by parameter and a :group_function parameter.

Searching posts, for example:

{% highlight ruby %}
Post.search 'syrup', :group_by => 'category_id', :group_function => :attr
{% endhighlight %}

By default, this will return your Post objects, but one per category_id. If you want to sort by how many posts each category contains, you can pass in :group_clause :

{% highlight ruby %}
Post.search 'syrup', :group_by => 'category_id', :group_function => :attr, :group_clause => "@count desc"
{% endhighlight %}

You can also group results by date. Given you have a date colum in your index:

{% highlight ruby %}
class Post < ActiveRecord::Base
  define_index
    ...
    has :created_at
  end
end
{% endhighlight %}

Then you can group search results by that date field:

{% highlight ruby %}
Post.search 'treacle', :group_by => 'created_at', :group_function => :day
{% endhighlight %}

You can use the following date types:
* :day
* :week
* :month
* :year