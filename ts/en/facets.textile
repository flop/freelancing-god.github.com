---
layout: ts_en
title: Facets
---

h2. Faceted Searching

Facet Searches are search summaries - they provide a breakdown of result counts for each of the defined categories/facets.

h3. Defining Facets

You define facets inside the *define_index* method, within your model. To specify that a field or attribute should be considered as a facet, explicitly label it using the *:facet* symbol.

{% highlight ruby %}
define_index do
  # ...
  indexes author.name, :as => :author, :facet => true
  
  # ...
  has category_id, :facet => true
end
{% endhighlight %}

You _cannot_ use custom SQL statements as string facet sources. Thinking Sphinx is unable to interpret the SQL within the context of the model, and strings can't be stored as strings when they are attributes in Sphinx.

Even if you define your facet as a field, Thinking Sphinx duplicates it into an attribute, because facets are essentially grouped searches, and grouping can only be done with attributes.

h3. Querying Facets

Facets are available through the facets class method on all ActiveRecord models that have Sphinx indexes, and are returned as a subclass of Hash. In this case
we're using the Article model:

{% highlight ruby %}
Article.facets # =>
{
  :author => {
    "Sherlock Holmes" => 3,
    "John Watson"     => 10
  },
  :category_id => {
    12 => 4,
    42 => 7,
    47 => 2
  }
}
{% endhighlight %}

The facets method accepts the same options as the *search* method.

{% highlight ruby %}
Article.facets 'pancakes'
Article.facets :conditions => {:subject => 'pancakes'}
{% endhighlight %}

You can also explicitly request just certain facets:

{% highlight ruby %}
Article.facets :facets => [:author]
{% endhighlight %}

Below is a basic example of rendering the facet search results in a view:

{% highlight erb %}
<% @facets.each do |facet, values| %>
  <h5><%= facet %></h5>
  <ul>
  <% values.each do |key, count| %>
    <li><%= link_to key, :overwrite_params => {facet => key} %></li>
  <% end %>
  </ul>
<% end %>
{% endhighlight %}

To retrieve the ActiveRecord object results based on a selected facet, you can use the *for* method on a facet search result.

{% highlight ruby %}
Article.facets('pancakes').for(:author => "Pat Allan")
{% endhighlight %}

h3. Global Facets

Faceted searches can be made across all indexed models, using the same arguments.

{% highlight ruby %}
ThinkingSphinx.facets 'pancakes'
{% endhighlight %}

By default, Thinking Sphinx does not request _all_ possible facets, only those common to all models. If you don't have any of your own facets, then this will just be the class facet, providing a summary of the matches per model.

{% highlight ruby %}
ThinkingSphinx.facets 'pancakes' # =>
{
  :class => {
    'Article' => 13,
    'User'    => 3,
    'Recipe'  => 23
  }
}
{% endhighlight %}

To disable the class facet, just set :class_facet to false.

{% highlight ruby %}
ThinkingSphinx.facets 'pancakes', :class_facet => false
{% endhighlight %}

And if you want absolutely every facet defined to be returned, whether or not they exist in all indexed models, set :all_facets to true.

{% highlight ruby %}
ThinkingSphinx.facets 'pancakes', :all_facets => true
{% endhighlight %}
